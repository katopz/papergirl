{
  "name": "Papergirl",
  "tagline": "XHR with ETAG via localForage",
  "body": "> PS : In heavy development, please leave her alone for now. :)\r\n\r\nPapergirl\r\n===\r\nPapergirl will deliver content when you make a request. She's smart enough  \r\nto let you know that you already have content in your hand by `etag`  \r\nso you will save your time going to remote server and be happy using local content.   \r\n\r\nStack\r\n===\r\n- [x] Persistent Data : https://github.com/mozilla/localForage\r\n- [ ] Compression : https://github.com/pieroxy/lz-string\r\n\r\nInstall\r\n===\r\n```shell\r\nnpm install papergirl --save\r\n```\r\n\r\nRun Examples\r\n===\r\n```shell\r\nnpm run dev\r\n```\r\n\r\nBasic\r\n===\r\n### Simple request as functional.\r\n```js\r\npapergirl.watch()\r\n.onCache(function(data) {\r\n    // Occur when got cached data.\r\n    console.log(data);\r\n})\r\n// Never Cached this data before.  \r\n.onInsert(function(data) {\r\n    console.log('onInsert:' + data);\r\n})\r\n// Cached exist but data is mismatch.\r\n.onUpdate(function(data) {\r\n    console.log('onUpdate:' + data);\r\n})\r\n.onError(function(error) {\r\n    console.log(error);\r\n})\r\n.request('foo.json');\r\n```\r\n\r\n### Simple request as functional with localhost fallback\r\n```js\r\npapergirl.watch()\r\n    // Cached exist.\r\n    .onCache(function(data) {\r\n        console.log('onCache:' + data);\r\n    })\r\n    // Never Cached this data before.  \r\n    .onInsert(function(data) {\r\n        console.log('onInsert:' + data);\r\n    })\r\n    // Cached exist but data is mismatch.\r\n    .onUpdate(function(data) {\r\n        console.log('onUpdate:' + data);\r\n    })\r\n    // Occur when insert or update cache from remote.\r\n    .onUpsert(function(data) {\r\n        console.log('onUpsert:' + data);\r\n    })\r\n    // Occur after 200 OK and cached done.\r\n    .onSync(function(data) {\r\n        console.log('onSync:' + data);\r\n    })\r\n    // Capture error\r\n    .onError(function(error) {\r\n        console.log('onError : ' + error);\r\n    })\r\n    // Use this uri when at localhost origin.\r\n    .local('bar.json')\r\n    // Make remote request.\r\n    .request('foo.json');\r\n```\r\nAdvance\r\n===\r\n```js\r\npapergirl.getCacheFirst('foo.json', {\r\n    // Occur when got cached data.\r\n    'cache': function(data) {\r\n        console.log(data);\r\n    },\r\n    // Intercept xhr request to modify headers before send.\r\n    'beforeSend': function(xhr) {\r\n        xhr.setRequestHeader('foo', 'bar');\r\n    },\r\n    // Intercept xhr while onload\r\n    'onload': function(xhr) {\r\n        console.log(xhr);\r\n    },\r\n    // Occur when never cache before and get insert from remote.\r\n    'insert': function(data) {\r\n        console.log('insert');\r\n    },\r\n    // Cached but not match from remote.\r\n    'update': function(data) {\r\n        console.log('update');\r\n    },\r\n    // Cache is upsert from remote.\r\n    'upsert': function(data) {\r\n        console.log('upsert');\r\n    },\r\n    // Cache data is match with remote data.\r\n    'match': function(data) {\r\n        console.log('match');\r\n    },\r\n    // Cache is match with remote by ETag.\r\n    'not_mod': function(data) {\r\n        console.log('not_mod');\r\n    },\r\n    // Occur after 200 OK and cached done.\r\n    'sync': function(data) {\r\n        console.log('sync');\r\n    }\r\n});\r\n```\r\n\r\nEvents\r\n===\r\n- [x] `cache` : Occur when got cached data.\r\n- [x] `beforeSend`: Intercept xhr request usually to modify headers before send.\r\n- [x] `onload`: Intercept xhr while onload.\r\n- [x] `insert` : Occur when never cache before and get insert from remote.\r\n- [x] `update` : Cached but not match from remote.\r\n- [x] `upsert` : Cache get `insert` or `update` from remote.\r\n- [x] `match` : Cache data is match with remote data.\r\n- [x] `not_mod` : Cache is match with remote by ETag.\r\n- [x] `sync` : Occur after 200 or 304 and cached done.\r\n\r\nTODO\r\n===\r\n- [x] Test strategy.cacheFirst.\r\n- [ ] Test strategy.networkFirst.\r\n- [ ] Test strategy.cacheOnly.\r\n- [ ] Test strategy.networkOnly.\r\n- [ ] Test parallel requests.\r\n- [ ] Implement optional `etag`. // useIfNoneMatch\r\n- [ ] Implement optional `last-modified`. // useLastModify\r\n- [ ] Implement `last-modified` fallback.\r\n- [ ] Test `last-modified` fallback.\r\n- [ ] Test ready.\r\n- [ ] Support multiple `storeName`.\r\n- [ ] Support `Cache-Control: max-age`.\r\n- [ ] Support xhr.responseTextType = 'json'.\r\n- [ ] Ignore query when cache.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}